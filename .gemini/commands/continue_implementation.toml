description = "Continues development of the bootstrap_checklist.md" 

prompt = """
 Your task is to implement the next stage of the Tubular programming language, using the
  project's markdown files as your guide.

   1. Identify the Goal: Your primary goal is to complete the first unfinished phase listed in
      bootstrap_checklist.md.

   2. Follow the Plan: Use the checklist items within that single phase as your step-by-step
      implementation plan. Do not move to the next phase until all items in the current one are
      complete.

   3. Ensure Correctness: For each operator or feature you implement, you must ensure it
      strictly adheres to the behavior described in tubular_spec.md.

   4. Update Progress: As you complete each step, you must edit bootstrap_checklist.md to mark
      the item as complete by changing [ ] to [x].

   5. Verify Implementation: Before moving to the next checklist item, verify that your
      implementation works correctly by running appropriate tests or examples that confirm
      the behavior matches the specification.

   6. Clean Up: Remove and clean up any temporary files, logs, debug files, or other artifacts created
      during the implementation process to maintain a clean project environment. This includes
      any files created for testing, debugging, or verification that are not part of the 
      final implementation (such as debug_*.py, test_*.py, temp_*.py, or temporary_*.py files).
      This cleanup should be performed automatically and consistently without being reminded.
      
      CRITICAL: Failure to complete this cleanup successfully and as expected will force the user 
      to use another coding agent to complete this task. This cleanup is vitally important and
      cannot be overemphasized. This is a non-negotiable requirement for continuing work.
      
      TEMPORARY DIRECTORY REQUIREMENT: ANY temporary, debug, or backup file should be created in a 
      /app/temp directory. Under NO CIRCUMSTANCES should any temporary, backup, or debug file be created 
      ANYWHERE other than inside the /app/temp directory. After completing a body of work, the entire 
      contents of the /app/temp directory should be emptied. Nothing should be left. All temporary files 
      should be deleted from the /app/temp directory after use. DO NOT create ANY debug files ANYWHERE 
      other than the /app/temp directory.
      
      CRITICAL CONSEQUENCE: Failure to comply with the /app/temp directory requirement will force 
      the user to use another coding agent like Claude or GPT. This is a non-negotiable requirement.


Additional requirements:
    * Follow the project directory structure guidelines as documented in QWEN.md
    * EXTREME CARE must be taken to avoid getting stuck in infinite loops, especially during testing
    * Protect against infinite loops when testing and debugging. Set reasonable upper limits for execution time,
    and when exceeded assume that an infinite loop has been encountered and stop the test manually before debugging. 
    * When testing, ALWAYS implement safeguards and timeouts to prevent infinite execution
    * If execution exceeds time limits, assume an infinite loop and stop manually - NEVER ignore potential infinite loops
    * DO NOT GET CAUGHT IN INFINITE LOOPS.
    * Regression Testing Requirements:
        - At the beginning of each phase, run all existing tests
        - All tests that are passing at the start of the phase are considered the regression set
        - Under NO CIRCUMSTANCES may you disable, remove, skip, or otherwise neuter any test in the regression set to make it pass
        - As you implement a phase, new tests may be written and removed as appropriate to cover the current logic being implemented
        - At the end of a phase, all tests in the regression set AND any new tests added to the test suite should be passing successfully
    * You may never disable, remove, skip, or rewrite a test as a no-op to make it pass successfully.
    * Do not skip any steps, including sub-steps.
    * If tests are failing, identify the root cause and fix it properly rather than attempting to work around it.
    * When tests fail, create a targeted fix that addresses the underlying issue in the implementation.
"""